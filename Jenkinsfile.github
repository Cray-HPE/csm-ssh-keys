@Library('csm-shared-library') _

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timestamps()
    }

    environment {
        NAME = "csm-ssh-keys"
        DESCRIPTION = "Cray Management System - CFS Roles for management of Keys"
        SPEC_FILE = "csm-ssh-keys.spec"
        IS_STABLE = getBuildIsStable()
        BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
    }

    stages {
        stage("Clone cms_meta_tools repo") {
            steps {
                withCredentials([gitUsernamePassword(credentialsId: 'jenkins-algol60-cray-hpe-github-integration')]) {
                    sh 'git clone --depth 1 --no-single-branch https://github.com/Cray-HPE/cms-meta-tools.git ./cms_meta_tools'
                }
            }
        }

        stage("Set Versions") {
            steps {
                script {
                    // Get version from version.py
                    def ver = sh(returnStdout: true, script: "head -1 .version").trim()
                    echo "Base version is ${ver}"

                    // Generate docker version string
                    def dockerver = getDockerBuildVersion(isStable: env.IS_STABLE)
                    echo "Docker version is ${dockerver}"

                    // Write docker version string to .docker_version
                    writeFile(file: ".docker_version", text: dockerver)

                    // Generate chart version string
                    def chartver = dockerver.replaceAll("_", "+")
                    echo "Chart version is ${chartver}"

                    // Write chart version to .chart_version
                    writeFile(file: ".chart_version", text: chartver)
                }
            }
        }

        stage("runBuildPrep") {
            steps {
                sh "make runbuildprep"
            }
        }

        stage("Lint") {
            steps {
                sh "make lint"
            }
        }

        stage("Add RPM Metadata") {
            steps {
                echo "RPM build metadata is ${env.BUILD_METADATA}"
                runLibraryScript("addRpmMetaData.sh", "")
            }
        }

        stage("Prepare") {
            steps {
                sh "make prepare"
            }
        }

        stage("Build") {
            parallel {
                stage('Image') {
                    environment {
                        DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                        DOCKER_ARGS = getDockerBuildArgs(name: env.NAME, description: env.DESCRIPTION, version: env.DOCKER_VERSION)
                    }

                    steps {
                        echo "Docker args are ${env.DOCKER_ARGS}"
                        sh "make image"
                    }
                }

                stage('Chart') {
                    environment {
                        DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                    }

                    steps {
                        updateCsmHelmChartAppVersion(chartPath: "${WORKSPACE}/kubernetes/csmsshkeys", appVersion: env.DOCKER_VERSION)
                        sh "make chart"
                    }
                }

                stage('Rpm') {
                    steps {
                        sh "make rpm"
                    }
                }
            }
        }

        stage('Publish ') {
            environment {
                DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
            }

            steps {
                publishCsmDockerImage(image: env.NAME, tag: env.DOCKER_VERSION, isStable: env.IS_STABLE)
                publishCsmHelmCharts(component: env.NAME, chartsPath: "${WORKSPACE}/kubernetes/.packaged", isStable: env.IS_STABLE)
                publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/RPMS/noarch/*.rpm", arch: "noarch", isStable: env.IS_STABLE)
                publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/SRPMS/*.rpm", arch: "src", isStable: env.IS_STABLE)
            }
        }
    }
}
